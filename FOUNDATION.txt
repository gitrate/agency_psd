FOUNDATION (база, основа)

диапазон ширины экрана, в которых работают классы:

class="small" - 639px и меньше
class="medium" - от 640px до 1023px
class="large" - от 1024px и до бесконечности

принцип mobile first - 
задаётся класс small, и если его не "остановить", то при увеличении экрана (при выходе за границы действия класса small - 639px) количество колонок, заданных классом small, будет сохраняться до бесконечности;
класс medium "перебивает" действие класса small и может установить своё кол-во колонок в диапазоне от 640px до 1023px/(или до бесконечности, если класс medium не перебит классом large);
класс large "перебивает" действие классов medium и small и может установить своё кол-во колонок в диапазоне от 1024px и до бесконечности.

<div class="row"> <!-- row - ряд - обязательный контейнер для колонок column/columns (column = columns) -->
	<div class="small-1 column"></div> <!-- одна колонка во всех диапазонах, обязательно указывать класс column -->
</div>

<div class="row">
	<div class="small-1 medium-2 column"></div> <!-- одна колонка до 639px и две от 640px до бесконечности -->
</div>

<div class="row">
	<div class="small-1 medium-2 large-4 column"></div> <!-- одна колонка до 639px, две от 640px до 1023px и четыре колонки от 1024px до бесконечности -->
</div>

Если в html-коде foundation в файле html задать класс medium и не указать класс small, то при уменьшении ширины экрана менее 640px, все блоки станут один под другим и станут как small-12 (на всю ширину экрана)
Чтобы избежать такого поведения блоков при уменьшении экрана и оставить поведение блоков таким же как в medium, нужно дописать в блоках классы small с теми же параметрами, что у medium.
А это значит, что если мы не хотим, чтобы поведение блоков менялось при любой ширине экрана, нам достаточно задавать только класс small.

Нам никто не запрещает писать свои медиа-запросы. К примеру, мы хотим получить определённое поведение элементов страницы на разрешении от 1200px до 1500px - пишем:
?????????????????????????????????????????????????????????????????????
@media screen and (min-width: 600px) and (max-width: 1500px) {
  color: #333; 
}
?????????????????????????????????????????????????????????????????????
Все размеры считаются в REM'ах. Total gutter = 1,875rem; 1,875 * 16 = 30px - общее расстояние между двух колонок. По обеим сторонам колонки имеем padding 30px/2 = 15px
max-width = 62,5rem = 62,5 * 16 = 1000px - ширина контентной части по умолчанию
1000/16 = max-width 62,5 rem
16px - к примеру, высота шрифта по умолчанию

После скачивания Foundation, мы имеем две папки - css и img, и файл index.html в корне проекта.
В index.html в header мы видим строки
    <link rel="stylesheet" href="css/foundation.css">
    <link rel="stylesheet" href="css/app.css">
	Логика такого расположения в том, чтобы кастомные стили перебили стандартный стиль foundation, перебивать стандартные стили не очень хорошо. Кроме того, стоит вписать в первой строке "min", если нет желания копаться в коде фреймворка (foundation.min.css меньше весит):
	  <link rel="stylesheet" href="css/foundation.min.css">
    <link rel="stylesheet" href="css/app.css">
А файл foundation.css удалим для экономии места.

????????????????????????????????????????????????????
padding по высоте расчитывается от ширины контентной области, поэтому при padding: 50%; из div можно получить квадрат
????????????????????????????????????????????????????
Элементы в ряду имеют свойство float left. Последний элемент в незаконченном ряду получает свойство float right. Чтобы отменить такое поведение последнего элемента, ему дают класс end.

Чтобы избавиться от паддингов между элементами, в родителе делают запись medium-collapse <div class="row medium-collapse">. Чтобы вернуть паддинги в большем разрешении, добавляют large-uncollapse 
<div class="row medium-collapse large-uncollapse">

По умолчанию, контентная область имеет какую-то максимальную ширину (1200px, к примеру). Если мы хотим растянуть элементы на всю ширину экрана, мы дописываем  expanded в row. expanded убивает паддинги по краям блока, чем нарушает сетку

medium-offset-1, записанное в класс блока, смещает блок на одну колонку. Офсеты всегда добавляются к блоку с левой стороны (потому что блоки флоатятся влево), не бывает правых офсетов. Блок при этом сохраняет свою ширину (medium-12), но сдвигается марджином вправо на ширину одной колонки (medium-offset-1).

class="column row" применяют для сокращения кода, чтобы не писать вложенные колонки (column) в строке (row), если требуется написать блок в одну строку на ширину всего контента, с такими же паддингами по краям, как у всех остальных блоков сетки.

Вложенные колонки позволяют реализовать иную сетку внутри сайта со стандатрной сеткой.

Есть возможность указать классы, которые показывают, сколько элементов мы хотим иметь в строке - 3, 4, 10... - не вычисляя никаких расстояний (small-up-1 medium-up-2 large-up-3 col-pallete).

<div class="medium-8 column show-for-large"> - show-for-large означает, что контент будет показан только при разрешении экрана от 1024 (large работает от 1024) и выше. А меньше - будет скрываться. Диву проставляется display: none;, но место под див не пропадает, вёрстка не сдвигается. show-for-medium - элемент исчезнет на small. show-for-small не имеет смысла, т.к. был бы показан всегда.

подобные классы:
.show-for-medium
.show-for-medium-only - странное поведение
.hide-for-medium - странное поведение
.hide-for-medium-only - на medium элемент исчезает, блоки остаются на своих местах

.hide - элемент исчезает, блоки смещаются

.invisible - элемент исчезает, блоки остаются на своих местах

Блочная сетка - быстрый способ создать столбцы одинакового размера. Добавьте класс  .[size]-up-[n], чтобы изменить число столбцов в пределах ряда. По умолчанию, максимальное число столбцов, которые можно использовать с блоком в сетке - 8. Если добавить класс .column-block для columns, то появится bottom margin, равный вертикальному отступу по ширине.
<div class="row small-up-2 medium-up-3 large-up-4">

	<div class="column column-block">
		<img src="#" alt="1">
	</div>
	<div class="column column-block">
		<img src="#" alt="1">
	</div>
	
</div>














